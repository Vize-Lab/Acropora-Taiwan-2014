---
title: "DESeq2 Acropora millepora (lab)"
author: "Matthew Oldach"
date: "`r format(Sys.Date())`"
output:
  html_document:
    keep_md: TRUE
---

Basically, I'm just following along with the DESeq2 Manual (http://www.bioconductor.org/packages/2.13/bioc/vignettes/DESeq2/inst/doc/DESeq2.pdf), the packages Vignette, and from a 2014 MEGA workshop (https://github.com/z0on, https://github.com/rachelwright8/Ahya-White-Syndromes).

## Guide to using the DESeq2 analyis package

```{r, message=FALSE}
## Install Packages
#source("http://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
#chooseCRANmirror()  # USA: CA1
#install.packages("arrayQualityMetrics")

library(DESeq2)
library(arrayQualityMetrics)
library(Biobase)
library(vsn)
library(ggplot2)
```

### Read in counts and simplify sample names
#### Each gene is designated as an isogroup we only see isogroup0, isogroup1, isogroup10, isogroup100, etc. in the head(). Counts were normalized to median (or mean) counts not control genes due to legit up-regulation of abundant genes
```{r}
countData <- read.table("allcounts.txt")
names(countData)=sub(".sam.counts","",names(countData))
names(countData)
```
```{r}
head(countData)
```
```{r}
write.csv(countData, "countData.csv", quote=F)
totalCounts=colSums(countData)
```
#### Total counts per sample (MEGA2014)
```{r}
totalCounts
min(totalCounts) 
max(totalCounts) 
mean(totalCounts) 
```

### Construct conditions (MEGA2014)
```{r}
indiv= c("H1", "H3", "H1", "H2", "H3", "H1", "H2", "H3", "H1", "H2", "H3", "H1", "H2", "H3", "H1", "H2", "H3", "H1", "H2", "H3", "H1", "H3")
lunar=c("3Q", "3Q", "NM", "NM", "NM", "1Q", "1Q", "1Q", "FM", "FM", "FM", "3Q", "3Q", "3Q", "NM", "NM", "NM", "1Q", "1Q", "1Q", "FM", "FM")
dayTime=c("day", "day", "day", "day", "day", "day", "day", "day", "day", "day", "day", "night", "night", "night", "night", "night", "night", "night", "night", "night", "night", "night")
```
```
```{r}
g=data.frame(indiv, lunar, dayTime)
g
```
```{r}
colData<- g
```
### Make big dataframe
```{r}
dds<-DESeqDataSetFromMatrix(countData=countData, colData=colData, design=~lunar+dayTime) 
```

## Sample Outlier Detection With arrayQualityMetrics
```{r}
vsd=varianceStabilizingTransformation(dds, blind=TRUE)
head(assay(vsd),10)
e=ExpressionSet(assay(vsd), AnnotatedDataFrame(as.data.frame(colData(vsd))))
arrayQualityMetrics(e, intgroup=c("indiv", "lunar", "dayTime"), force=T)
```
No outliers

# Differential Expression Analysis (DESeq2)
```{r} 
dds <- DESeq(dds)
res<-results(dds)
summary(res)
head(res)
```

# Visulizations 

#### Create a MA plot showing DEGs (MEGA2014)
Lets plot the log2 fold changes against the mean normalised counts, colouring in red those genes that are significatn at 10% FDR
```{r}
plotMA(res, alpha=0.01)
```

Both are empty (we can save the table and print information on the meaning of the columns as well)
```{r}
mcols(res,use.names=TRUE)
```
```{r}
write.csv(as.data.frame(res),file="lab_results_DESeq2.csv")
```
Removed NA values is that correct?

#### plotDispEsts(dds)
```{r}
plotDispEsts(dds, main="Dispersion plot", ylim = c(1e-6, 1e1) )
```

The level of dispersion is related to the biological variation seen in each treatment. As read count increases dispersion decreases, as we would expect. 

However, a lot of those black dot values below the red fitted line are probably underestimates of dispersion based on the small samples sizes used (only 3 replicates values measured in this example). So, to be conservative DESeq moves all these values below the red line up to the fitted value, BUT keeps all the empirical values above the red line, even if some of these are over estimates of dispersion.

#### Plot a histogram of unadjusted p-values after filtering to look at their distribution
```{r}
hist(res$pvalue, breaks=100, col="skyblue",border="slateblue",main="unadjustedP-value Histogram")
```
The pileups in the right hand side of distribution are from very low count genes that are given discrete values.


#### Regularized log transformation for clustering/heatmaps, etc
```{r}
rld <- rlogTransformation(dds, blind=TRUE)
# we choose blind so that the initial conditions setting does not influence the outcome, ie we want to see if the conditions cluster based purely on the individual 
head(assay(rld))
hist(assay(rld))
```
#### 
```{r}
par(mfrow=c(1,3))
notAllZero <- (rowSums(counts(dds))>0)
meanSdPlot(log2(counts(dds,normalized=TRUE)[notAllZero,] + 1), ylim = c(0,2.5))
meanSdPlot(assay(rld[notAllZero,]), ylim = c(0,2.5))
meanSdPlot(assay(vsd[notAllZero,]), ylim = c(0,2.5))
qs <- c( 0, quantile( res$baseMean[res$baseMean > 0], 0:7/7 ) )
# "cut" the genes into the bins
bins <- cut( res$baseMean, qs )
# rename the levels of the bins using the middle point
levels(bins) <- paste0("~",round(.5*qs[-1] + .5*qs[-length(qs)]))
# calculate the ratio of £p£ values less than .01 for each bin
ratios <- tapply( res$pvalue, bins, function(p) mean( p < .01, na.rm=TRUE ) )
# plot these ratios
barplot(ratios, xlab="mean normalized count", ylab="ratio of small $p$ values")
```
## Use Expanded Model Matrices contrasts to compare 2 lunar period across all dayTimes
```{r}
#------full moon to new moon - produces a comparison of FM over NM across ALL sets
resAH=results(dds, contrast=c("lunar", "4","2"))
table(resAH$padj<0.1)
table(resAH$pvalue<0.05)

#------full moon to 1Q - produces a comparison of FM over 1Q across ALL dayTime(s)
resDH=results(dds, contrast=c("lunar", "4","3"))
table(resDH$padj<0.1)
table(resDH$pvalue<0.05)

#------new moon to 1Q - day to night
resDD=results(dds, contrast=c("lunar", "2","3"))
table(resDD$padj<0.1)
table(resDD$pvalue<0.05)

#------full moon to 3Q - produces a comparison of FM over 3Q across ALL dayTime(s)
resDA=results(dds, contrast=c("lunar", "4","1"))
table(resDA$padj<0.1)
table(resDA$pvalue<0.05)

#------new moon to 3Q - produces a comparison of FM over 3Q across ALL dayTime(s)
resNM=results(dds, contrast=c("lunar", "2","1"))
table(resNM$padj<0.1)
table(resNM$pvalue<0.05)

#-----1Q to 3Q 
resDV=results(dds, contrast=c("lunar", "3","1"))
table(resDV$padj<0.1)
table(resDV$pvalue<0.05)

#------day to night - 
resDN=results(dds,contrast=c("dayTime", "day", "night"))
table(resDN$padj<0.1)
table(resDN$pvalue<0.05) 

save(dds, res, resAH, resDH, resDA, resNM, resDD, resDV, resDN, file="DESeq2Results.Rdata")
```

## Exporting and log GO
```{r}
vsd=getVarianceStabilizedData(dds) 
head(vsd)
colnames(vsd)=paste(g$indiv, g$lunar, g$dayTime, sep="")

###--------------get pvals from contrasts
head(resAH)
valsAH=cbind(resAH$pvalue, resAH$padj)
head(valsAH)
colnames(valsAH)=c("pvalAH", "padjAH")

head(resDH)
valsDH=cbind(resDH$pvalue, resDH$padj)
head(valsDH)
colnames(valsDH)=c("pvalDH", "padjDH")

head(resDA)
valsDA=cbind(resDA$pvalue, resDA$padj)
head(valsDA)
colnames(valsDA)=c("pvalDA", "padjDA")

head(resNM)
valsNM=cbind(resNM$pvalue, resNM$padj)
head(valsNM)
colnames(valsNM)=c("pvalNM", "padjNM")

head(resDD)
valsDD=cbind(resDD$pvalue, resDD$padj)
head(valsDD)
colnames(valsDD)=c("pvalDD", "padjDD")

head(resDV)
valsDV=cbind(resDV$pvalue, resDV$padj)
head(valsDV)
colnames(valsDV)=c("pvalDV", "padjDV")

head(resDN)
valsDN=cbind(resDN$pvalue, resDN$padj)
head(valsDN)
colnames(valsDN)=c("pvalDN", "padjDN")

results=cbind(valsAH, valsDH, valsDA, valsNM, valsDD, valsDV, valsDN)
head(results)
```
#### Explore Contrasts
```{r}
######-------------make vsd and pvals table
vsdpvals=cbind(vsd,results)
head(vsdpvals)

write.csv(vsdpvals, "VSDandPVALS_lunar.csv", quote=F)
VSD_PVals=read.csv("VSDandPVALS_lunar.csv")
```

####---------------get data for WGCNA
```{r}
head(vsdpvals)
vsdp=as.data.frame(vsdpvals)

AH=vsdp[vsdp$pvalAH<0.1 & !is.na(vsdp$pvalAH),]
length(AH[,1]) 

DH=vsdp[vsdp$pvalDH<0.1 & !is.na(vsdp$pvalDH),]
length(DH[,1]) 

DA=vsdp[vsdp$pvalDA<0.1 & !is.na(vsdp$pvalDA),]
length(DA[,1]) 

NM=vsdp[vsdp$pvalNM<0.1 & !is.na(vsdp$pvalNM),]
length(NM[,1]) 

DD=vsdp[vsdp$pvalDD<0.1 & !is.na(vsdp$pvalDD),]
length(DD[,1]) 

DV=vsdp[vsdp$pvalDV<0.1 & !is.na(vsdp$pvalDV),]
length(DV[,1]) 

DN=vsdp[vsdp$pvalDN<0.1 & !is.na(vsdp$pvalDN),]
length(DN[,1]) 

degs01=union(row.names(AH),row.names(DH))
degs01=union(degs01,row.names(DA))
degs01=union(degs01,row.names(NM))
degs01=union(degs01,row.names(DD))
degs01=union(degs01,row.names(DV))
degs01=union(degs01,row.names(DN))

length(degs01)

wdegs01=vsd[(row.names(vsd) %in% degs01),]
head(wdegs01)

write.csv(wdegs01, "genes4WGCNA.csv", quote=F)


######----------log GO
head(resAH)
logs=data.frame(cbind("gene"=row.names(resAH),"logP"=round(-log(resAH$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resAH$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_AH_logP.csv",sep=",")

head(resDH)
logs=data.frame(cbind("gene"=row.names(resDH),"logP"=round(-log(resDH$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resDH$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_DH_logP.csv",sep=",")

head(resDA)
logs=data.frame(cbind("gene"=row.names(resDA),"logP"=round(-log(resDA$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resDA$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_DA_logP.csv",sep=",")

head(resNM)
logs=data.frame(cbind("gene"=row.names(resNM),"logP"=round(-log(resNM$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resNM$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_NM_logP.csv",sep=",")

head(resDD)
logs=data.frame(cbind("gene"=row.names(resDD),"logP"=round(-log(resDD$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resDD$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_DD_logP.csv",sep=",")

head(resDV)
logs=data.frame(cbind("gene"=row.names(resDV),"logP"=round(-log(resDV$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resDV$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_DV_logP.csv",sep=",")

head(resDN)
logs=data.frame(cbind("gene"=row.names(resDN),"logP"=round(-log(resDN$pvalue+1e-10,10),1)))
logs$logP=as.numeric(as.character(logs$logP))
sign=rep(1,nrow(logs))
sign[resDN$log2FoldChange<0]=-1  ##change to correct model
table(sign)
logs$logP=logs$logP*sign
write.table(logs,quote=F,row.names=F,file="GO_DN_logP.csv",sep=",")

#-------------write results tables; includes log2fc and pvals
write.table(results(dds), file="DESeq.results.txt", quote=FALSE, sep="\t");  
write.table(resAH, file="DESeq.results.AH.txt", quote=F, sep="\t")
write.table(resDH, file="DESeq.results.DH.txt", quote=F, sep="\t")
write.table(resDA, file="DESeq.results.DA.txt", quote=F, sep="\t")
write.table(resNM, file="DESeq.results.NM.txt", quote=F, sep="\t")
write.table(resDD, file="DESeq.results.DD.txt", quote=F, sep="\t")
write.table(resDV, file="DESeq.results.DV.txt", quote=F, sep="\t")
write.table(resDN, file="DESeq.results.DN.txt", quote=F, sep="\t")
```

#### Write annotated results tables
```{r}
gg=read.delim("amil_iso2gene.tab", sep="\t")
head(gg)

resAH=as.data.frame(resAH)
resAH$X=row.names(resAH)
names(resAH)
resAH=resAH[c(7,1:6)]
resAHannot=merge(resAH,gg,by=1)
head(resAHannot)
resAHannot <- resAHannot[order(resAHannot$padj),]
write.table(resAHannot, "annotated_results_AH.txt", sep="\t", quote=F, row.names=F)

resDH=as.data.frame(resDH)
resDH$X=row.names(resDH)
names(resDH)
resDH=resDH[c(7,1:6)]
resDHannot=merge(resDH,gg,by=1)
head(resDHannot)
resDHannot <- resDHannot[order(resDHannot$padj),]
write.table(resDHannot, "annotated_results_DH.txt", sep="\t", quote=F, row.names=F)

resDA=as.data.frame(resDA)
resDA$X=row.names(resDA)
names(resDA)
resDA=resDA[c(7,1:6)]
head(resDA)
resDAannot=merge(resDA,gg,by=1)
head(resDAannot)
resDAannot <- resDAannot[order(resDAannot$padj),]
write.table(resDAannot, "annotated_results_DA.txt", sep="\t", quote=F, row.names=F)

resNM=as.data.frame(resNM)
resNM$X=row.names(resNM)
names(resNM)
resNM=resNM[c(7,1:6)]
head(resNM)
resNMannot=merge(resNM,gg,by=1)
head(resNMannot)
resNMannot <- resNMannot[order(resNMannot$padj),]
write.table(resNMannot, "annotated_results_NM.txt", sep="\t", quote=F, row.names=F)

resDD=as.data.frame(resDD)
resDD$X=row.names(resDD)
names(resDD)
resDD=resDD[c(7,1:6)]
resDDannot=merge(resDD,gg,by=1)
head(resDDannot)
resDDannot <- resDDannot[order(resDDannot$padj),]
write.table(resDDannot, "annotated_results_DD.txt", sep="\t", quote=F, row.names=F)

resDV=as.data.frame(resDV)
resDV$X=row.names(resDV)
names(resDV)
resDV=resDV[c(7,1:6)]
resDVannot=merge(resDV,gg,by=1)
head(resDVannot)
resDVannot <- resDVannot[order(resDVannot$padj),]
write.table(resDVannot, "annotated_results_DV.txt", sep="\t", quote=F, row.names=F)

resDN=as.data.frame(resDN)
resDN$X=row.names(resDN)
names(resDN)
resDN=resDN[c(7,1:6)]
resDNannot=merge(resDN,gg,by=1)
head(resDNannot)
resDNannot <- resDNannot[order(resDNannot$padj),]
write.table(resDNannot, "annotated_results_DN.txt", sep="\t", quote=F, row.names=F)
```

```{r, error=FALSE, message=FALSE, warning=FALSE, warn.conflicts=FALSE}
topGenes <- rownames(resAH)[order(resAH$padj)][226:250]
topGenes
```


```{r, error=FALSE, message=FALSE, warning=FALSE, warn.conflicts=FALSE}

z <- lapply(topGenes, function(x) plotCounts(dds, x, c("dayTime", "lunar"),returnData = TRUE))
z
for(i in 1:25) z[[i]]$gene <- rep(topGenes[i], 22)
z <- do.call(rbind, z)
pdf("AH_BydayTime_isogroup5671.pdf")
ggplot(z, aes(x=lunar, y=count, color=dayTime, group=dayTime)) + 
  geom_point(position = position_jitter(width =0.1, height=0), size = 3) + stat_smooth(se=FALSE,method="loess") +  scale_y_log10() + facet_wrap(~gene)
  dev.off()
```
# Individuals
```{r, error=FALSE, message=FALSE, warning=FALSE, warn.confligcts=FALSE}
z <- lapply(topGenes, function(x) plotCounts(dds, x, c("indiv", "lunar"),returnData = TRUE))
z
for(i in 1:25) z[[i]]$gene <- rep(topGenes[i], 22)
pdf("AH_Byindiv_isogroup5671.pdf")
z <- do.call(rbind, z)
ggplot(z, aes(x=lunar, y=count, color=indiv, group=indiv)) + 
  geom_point(position = position_jitter(width =0.1, height=0), size = 3) + stat_smooth(se=FALSE,method="loess") +  scale_y_log10() + facet_wrap(~gene)
dev.off()
